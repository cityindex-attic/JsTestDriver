diff -aur JsTestDriver/com/google/jstestdriver/ConfigurationParser.java modified-JsTestDriver/com/google/jstestdriver/ConfigurationParser.java
--- JsTestDriver/com/google/jstestdriver/ConfigurationParser.java	2009-10-21 14:45:48.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/ConfigurationParser.java	2010-01-08 19:56:34.000000000 -0800
@@ -23,6 +23,7 @@
 
 import java.io.File;
 import java.io.Reader;
+import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashSet;
@@ -46,6 +47,7 @@
   private final PathRewriter pathRewriter;
 
   private String server = "";
+  private String charset = Charset.defaultCharset().name(); // default to the default charset
   private List<Plugin> plugins = new LinkedList<Plugin>();
 
   private PathResolver pathResolver = new PathResolver();
@@ -62,6 +64,9 @@
     Set<FileInfo> resolvedFilesLoad = new LinkedHashSet<FileInfo>();
     Set<FileInfo> resolvedFilesExclude = new LinkedHashSet<FileInfo>();
 
+    if (data.containsKey("charset")) {
+        this.charset = (String) data.get("charset");
+      }
     if (data.containsKey("load")) {
       resolvedFilesLoad.addAll(resolveFiles((List<String>) data.get("load"), false));
     }
@@ -129,7 +134,7 @@
           f = tokens[1].trim();
         }
         if (f.startsWith("http://") || f.startsWith("https://")) {
-          resolvedFiles.add(new FileInfo(f, -1, false, false, null));
+          resolvedFiles.add(new FileInfo(f, -1, false, false, this.charset, null));
         } else {
           File file = basePath != null ? new File(basePath.getAbsoluteFile(), f) : new File(f);
           File testFile = file.getAbsoluteFile();
@@ -155,7 +160,7 @@
             File resolvedFile = new File(resolvedFilePath);
 
             resolvedFiles.add(new FileInfo(resolvedFilePath, resolvedFile.lastModified(), isPatch,
-                serveOnly, null));
+                serveOnly, this.charset, null));
           }
         }
       }
@@ -172,6 +177,10 @@
     return server;
   }
 
+  public String getCharset() {
+    return charset;
+  }
+
   public List<Plugin> getPlugins() {
     return plugins;
   }
diff -aur JsTestDriver/com/google/jstestdriver/FileInfo.java modified-JsTestDriver/com/google/jstestdriver/FileInfo.java
--- JsTestDriver/com/google/jstestdriver/FileInfo.java	2009-09-28 13:31:56.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/FileInfo.java	2010-01-08 19:51:04.000000000 -0800
@@ -34,6 +34,7 @@
   private transient boolean isPatch;
   private boolean serveOnly;
   private List<FileInfo> patches;
+  private String charset;
   private String data;
 
   public String getData() {
@@ -48,6 +49,16 @@
   }
 
   public FileInfo(String fileName, long timestamp, boolean isPatch,
+      boolean serveOnly, String charset, String data) {
+    this.file = fileName;
+    this.timestamp = timestamp;
+    this.isPatch = isPatch;
+    this.serveOnly = serveOnly;
+    this.charset = charset;
+    this.data = data;
+  }
+
+  public FileInfo(String fileName, long timestamp, boolean isPatch,
       boolean serveOnly, String data) {
     this.file = fileName;
     this.timestamp = timestamp;
@@ -82,6 +93,10 @@
     return timestamp;
   }
 
+  public String getCharset() {
+    return charset;
+  }
+
   public boolean isPatch() {
     return isPatch;
   }
diff -aur JsTestDriver/com/google/jstestdriver/JsTestDriverModule.java modified-JsTestDriver/com/google/jstestdriver/JsTestDriverModule.java
--- JsTestDriver/com/google/jstestdriver/JsTestDriverModule.java	2009-10-21 09:34:42.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/JsTestDriverModule.java	2010-01-08 19:57:54.000000000 -0800
@@ -34,15 +34,18 @@
 public class JsTestDriverModule extends AbstractModule {
 
   private final Flags flags;
+  private final String charset;
   private final Set<FileInfo> fileSet;
   private final List<Module> plugins;
   private final String serverAddress;
 
   public JsTestDriverModule(Flags flags,
+                            String charset,
                             Set<FileInfo> fileSet,
                             List<Module> plugins,
                             String serverAddress) {
     this.flags = flags;
+    this.charset = charset;
     this.fileSet = fileSet;
     this.plugins = plugins;
     this.serverAddress = serverAddress;
@@ -53,6 +56,9 @@
     bind(String.class)
          .annotatedWith(Names.named("server")).toInstance(serverAddress);
 
+    bind(String.class)
+         .annotatedWith(Names.named("charset")).toInstance(charset);
+
     bind(new TypeLiteral<Set<FileInfo>>() {}).annotatedWith(Names.named("originalFileSet"))
         .toInstance(fileSet);
 
diff -aur JsTestDriver/com/google/jstestdriver/JsTestDriverServer.java modified-JsTestDriver/com/google/jstestdriver/JsTestDriverServer.java
--- JsTestDriver/com/google/jstestdriver/JsTestDriverServer.java	2009-10-26 18:41:00.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/JsTestDriverServer.java	2010-01-08 19:55:51.000000000 -0800
@@ -29,6 +29,7 @@
 
 import java.io.File;
 import java.io.Reader;
+import java.nio.charset.Charset;
 import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
@@ -125,6 +126,7 @@
     try {
       Flags flags = new FlagsParser().parseArgument(args);
       File config = new File(flags.getConfig());
+      String charset = Charset.defaultCharset().name();
       Set<FileInfo> fileSet = new LinkedHashSet<FileInfo>();
       List<Module> modules = new LinkedList<Module>();
 
@@ -141,6 +143,7 @@
         PluginLoader pluginLoader = new PluginLoader();
         configParser.parse();
         fileSet = configParser.getFilesList();
+        charset = configParser.getCharset();
         if (serverAddress == null || serverAddress.length() == 0) {
           serverAddress = configParser.getServer();
         }
@@ -160,7 +163,7 @@
         modules.add(new PrintStreamClientModule(System.out));
       }
       Injector injector =
-          Guice.createInjector(new JsTestDriverModule(flags, fileSet, modules, serverAddress));
+          Guice.createInjector(new JsTestDriverModule(flags, charset, fileSet, modules, serverAddress));
 
       injector.getInstance(ActionRunner.class).runActions();
     } catch (CmdLineException e) {
diff -aur JsTestDriver/com/google/jstestdriver/ProcessingFileLoader.java modified-JsTestDriver/com/google/jstestdriver/ProcessingFileLoader.java
--- JsTestDriver/com/google/jstestdriver/ProcessingFileLoader.java	2009-08-26 10:29:46.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/ProcessingFileLoader.java	2010-01-07 21:22:03.000000000 -0800
@@ -78,6 +78,7 @@
                         timestamp,
                         false,
                         file.isServeOnly(),
+                        file.getCharset(),
                         fileContent.toString());
   }
 
diff -aur JsTestDriver/com/google/jstestdriver/RelativePathConverter.java modified-JsTestDriver/com/google/jstestdriver/RelativePathConverter.java
--- JsTestDriver/com/google/jstestdriver/RelativePathConverter.java	2009-08-26 10:29:46.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/RelativePathConverter.java	2010-01-07 21:21:44.000000000 -0800
@@ -37,7 +37,7 @@
 
     for (FileInfo f : files) {
       convertedPaths.add(new FileInfo(f.getFileName().replace(baseDir, ""), f.getTimestamp(),
-          f.isPatch(), f.isServeOnly(), f.getData()));
+          f.isPatch(), f.isServeOnly(), f.getCharset(), f.getData()));
     }
     return convertedPaths;
   }
diff -aur JsTestDriver/com/google/jstestdriver/SimpleFileReader.java modified-JsTestDriver/com/google/jstestdriver/SimpleFileReader.java
--- JsTestDriver/com/google/jstestdriver/SimpleFileReader.java	2009-08-04 16:19:08.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/SimpleFileReader.java	2010-01-08 19:58:56.000000000 -0800
@@ -16,22 +16,35 @@
 package com.google.jstestdriver;
 
 import java.io.BufferedInputStream;
+import java.io.BufferedReader;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
+
+import com.google.inject.Inject;
+import com.google.inject.name.Named;
 
 /**
  * A simple filereader.
  * @author corysmith
  */
 public class SimpleFileReader implements FileReader {
-
+  protected String charSet;
+  
+  @Inject
+  public SimpleFileReader(@Named("charset") String charSet) {
+	  this.charSet = charSet;
+  }
+	
   public String readFile(String file)  {
-    BufferedInputStream bis = null;
+    InputStreamReader isr = null;
+    BufferedReader br = null;
     try {
-      bis = new BufferedInputStream(new FileInputStream(file));
+      isr = new InputStreamReader(new FileInputStream(file), this.charSet);
+      br = new BufferedReader(isr);
       StringBuilder sb = new StringBuilder();
 
-      for (int c = bis.read(); c != -1; c = bis.read()) {
+      for (int c = br.read(); c != -1; c = br.read()) {
         sb.append((char) c);
       }
       String contents = sb.toString();
@@ -40,9 +53,9 @@
     } catch (IOException e) {
       throw new RuntimeException("Impossible to read file: " + file, e);
     } finally {
-      if (bis != null) {
+      if (br != null) {
         try {
-          bis.close();
+          br.close();
         } catch (IOException e) {
           // ignore
         }
diff -aur JsTestDriver/com/google/jstestdriver/TestResourceServlet.java modified-JsTestDriver/com/google/jstestdriver/TestResourceServlet.java
--- JsTestDriver/com/google/jstestdriver/TestResourceServlet.java	2009-08-26 10:29:46.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/TestResourceServlet.java	2010-01-08 09:19:07.000000000 -0800
@@ -38,15 +38,15 @@
 
   @Override
   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
-    resp.setHeader("Pragma", "no-cache");
+    FileInfo info = filesCache.getFileInfo(req.getPathInfo().substring(1));
+    String data = info.getData();
+
+    resp.setContentType("text/plain; charset=" + info.getCharset());
+	resp.setHeader("Pragma", "no-cache");
     resp.setHeader("Cache-Control", "private, no-cache, no-store, max-age=0, must-revalidate");
     resp.setHeader("Expires", TIME_IN_THE_PAST);
-    resp.setHeader("Content-Type", "text/plain");
-    service(req.getPathInfo().substring(1) /* remove the first / */, resp.getWriter());
-  }
 
-  public void service(String fileName, PrintWriter writer) {
-    String data = filesCache.getFileContent(fileName);
+    PrintWriter writer = resp.getWriter();
 
     if (data != null) {
       writer.write(data);
diff -aur JsTestDriver/com/google/jstestdriver/html/ConcreteToken.java modified-JsTestDriver/com/google/jstestdriver/html/ConcreteToken.java
--- JsTestDriver/com/google/jstestdriver/html/ConcreteToken.java	2009-09-28 13:31:50.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/html/ConcreteToken.java	2010-01-05 09:06:54.000000000 -0800
@@ -15,8 +15,8 @@
  */
 package com.google.jstestdriver.html;
 
-import java.io.BufferedInputStream;
 import java.io.IOException;
+import java.io.Reader;
 import java.io.Writer;
 import java.util.Arrays;
 
@@ -33,16 +33,17 @@
     this.token = token;
   }
 
-  public Token create(BufferedInputStream stream) {
+  public Token create(Reader in) {
     try {
       for (int i = 0; i < token.length; i++) {
-        char read = (char) stream.read();
-        if (token[i] != read) {
-          stream.reset();
+        char read = (char) in.read();
+        if (read == -1) {
+        	return null;
+        } else if (token[i] != read) {
+          in.reset();
           return null;
         }
       }
-      stream.mark(Integer.MAX_VALUE);
       return this;
     } catch (IOException e) {
       throw new RuntimeException(e);
diff -aur JsTestDriver/com/google/jstestdriver/html/HtmlDocLexer.java modified-JsTestDriver/com/google/jstestdriver/html/HtmlDocLexer.java
--- JsTestDriver/com/google/jstestdriver/html/HtmlDocLexer.java	2009-09-28 13:31:50.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/html/HtmlDocLexer.java	2010-01-05 09:00:32.000000000 -0800
@@ -15,8 +15,7 @@
  */
 package com.google.jstestdriver.html;
 
-import java.io.BufferedInputStream;
-import java.io.InputStream;
+import java.io.Reader;
 
 /**
  * Acts as a factory for configuring a TokenEmitter and wrapping it in a 
@@ -31,7 +30,7 @@
                                                     ConcreteToken.from("="),
                                                     ConcreteToken.from("}")};
   
-  public BufferedTokenStream createStream(InputStream in) {
-    return new BufferedTokenStream(new TokenEmitter(new BufferedInputStream(in), TOKENS));
+  public BufferedTokenStream createStream(Reader in) {
+    return new BufferedTokenStream(new TokenEmitter(in, TOKENS));
   }
 }
diff -aur JsTestDriver/com/google/jstestdriver/html/InlineHtmlProcessor.java modified-JsTestDriver/com/google/jstestdriver/html/InlineHtmlProcessor.java
--- JsTestDriver/com/google/jstestdriver/html/InlineHtmlProcessor.java	2009-09-28 13:31:50.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/html/InlineHtmlProcessor.java	2010-01-07 21:22:40.000000000 -0800
@@ -15,9 +15,9 @@
  */
 package com.google.jstestdriver.html;
 
-import java.io.ByteArrayInputStream;
 import java.io.CharArrayWriter;
 import java.io.IOException;
+import java.io.StringReader;
 import java.io.Writer;
 
 import com.google.inject.Inject;
@@ -45,13 +45,13 @@
       String source = file.getData();
       Writer writer = new CharArrayWriter();
       parser.parse(
-          lexer.createStream(
-              new ByteArrayInputStream(source.getBytes()))).write(writer);
+          lexer.createStream(new StringReader(source))).write(writer);
       writer.flush();
       return new FileInfo(file.getFileName(),
                           file.getTimestamp(),
                           file.isPatch(),
                           file.isServeOnly(),
+                          file.getCharset(),
                           writer.toString());
     } catch (IOException e) {
       e.printStackTrace();
diff -aur JsTestDriver/com/google/jstestdriver/html/Token.java modified-JsTestDriver/com/google/jstestdriver/html/Token.java
--- JsTestDriver/com/google/jstestdriver/html/Token.java	2009-09-28 13:31:50.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/html/Token.java	2010-01-05 08:58:10.000000000 -0800
@@ -15,7 +15,7 @@
  */
 package com.google.jstestdriver.html;
 
-import java.io.BufferedInputStream;
+import java.io.Reader;
 import java.io.Writer;
 
 
@@ -27,7 +27,7 @@
  */
 public interface Token {
   //TODO(corysmith): extract the token matcher from the token.
-  public abstract Token create(BufferedInputStream stream);
+  public abstract Token create(Reader in);
 
   public abstract void write(Writer out);
 
diff -aur JsTestDriver/com/google/jstestdriver/html/TokenEmitter.java modified-JsTestDriver/com/google/jstestdriver/html/TokenEmitter.java
--- JsTestDriver/com/google/jstestdriver/html/TokenEmitter.java	2009-09-28 13:31:50.000000000 -0700
+++ modified-JsTestDriver/com/google/jstestdriver/html/TokenEmitter.java	2010-01-05 09:23:16.000000000 -0800
@@ -15,33 +15,44 @@
  */
 package com.google.jstestdriver.html;
 
-import java.io.BufferedInputStream;
 import java.io.IOException;
+import java.io.Reader;
 import java.util.Iterator;
 
 public class TokenEmitter implements Iterator<Token>{
-  private final BufferedInputStream stream;
+  private final Reader in;
   private final Token[] tokens;
+  private boolean atEndOfStream = false;
+  private static final int MAX_READ_AHEAD = 1000; // Fragile
   private Token currentToken = null;
   private TokenEmitter.TokenBuilder tokenBuilder = new TokenBuilder();
 
-  public TokenEmitter(BufferedInputStream stream, Token[] tokens) {
-    this.stream = stream;
+  /**
+   * @param in The reader to extract tokens from.  This MUST support the mark() method (would make you happier if it is buffered as well)
+   * @param tokens The array of tokens this will lok for in the input 
+   */
+  public TokenEmitter(Reader in, Token[] tokens) {
+    if (in.markSupported() == false) {
+    	throw new IllegalArgumentException("Reader must be one that supports mark()");
+    }
+    this.in = in;
     this.tokens = tokens;
   }
   
   public Token next() {
-    stream.mark(Integer.MAX_VALUE);
     if (currentToken != null) {
       Token nextToken = currentToken;
       currentToken = null;
       return nextToken;
     }
     try {
-      while(stream.available() > 0) {
+      in.mark(TokenEmitter.MAX_READ_AHEAD);
+      int aChar = 0;
+      while(this.atEndOfStream == false) {
         for (Token token : tokens) {
-          Token newToken = token.create(stream);
+          Token newToken = token.create(in);
           if (newToken != null) {
+             in.mark(TokenEmitter.MAX_READ_AHEAD);
             if (tokenBuilder.hasToken()) {
               currentToken = newToken;
               newToken = tokenBuilder.toToken();
@@ -51,8 +62,13 @@
             return newToken;
           }
         }
-        tokenBuilder.append(stream.read());
-        stream.mark(Integer.MAX_VALUE);
+        aChar = in.read();
+        if (aChar == -1) {
+          this.atEndOfStream = true;
+        } else {
+          tokenBuilder.append(aChar);
+        }
+        in.mark(TokenEmitter.MAX_READ_AHEAD);
       }
       if (currentToken != null) {
         Token nextToken = currentToken;
@@ -72,8 +88,15 @@
   }
 
   public boolean hasNext() {
+	  
     try {
-      return stream.available() > 0 || currentToken != null || tokenBuilder.hasToken();
+      this.in.mark(TokenEmitter.MAX_READ_AHEAD);
+      int aChar = this.in.read();
+      if (aChar == -1) {
+        this.atEndOfStream = true;
+      }
+      this.in.reset();
+      return (!this.atEndOfStream) || currentToken != null || tokenBuilder.hasToken();
     } catch (IOException e) {
       throw new RuntimeException(e);
     }
