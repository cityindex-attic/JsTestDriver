<project name="JsTestDriver" default="jar">

  <property name="src.dir" value="src" />
  <property name="src-test.dir" value="src-test" />
  <property name="lib.dir" value="lib" />
  <property name="main-class" value="com.google.jstestdriver.JsTestDriverServer" />
  <property name="javascript-resources" value="com/google/jstestdriver/javascript" />
  <property name="test-resources" value="com/google/jstestdriver" />
  <property name="target.dir" value="target" />
  <property name="obj.dir" value="${target.dir}/obj" />
  <property name="obj-debug.dir" value="${target.dir}/obj-debug" />
  <property name="obj-test.dir" value="${target.dir}/obj-test" />
  <property name="bin.dir" value="${target.dir}/bin" />
  <property name="emma.dir" value="${target.dir}/emma" />
  <property name="emma-bin.dir" value="${target.dir}/bin" />
  <property name="emma-reports.dir" value="${target.dir}/reports/emma" />
  <property name="junit.reports.dir" value="${target.dir}/reports/junit" />
  <property name="jstestdriver.reports.dir" value="${target.dir}/reports/jstestdriver" />
  <property name="jstests.dir" value="src-test/com/google/jstestdriver/javascript" />
  <property name="testability-explorer.reports.dir" value="${target.dir}/reports/testability-explorer" />
  <property name="defaultbrowser" value="/usr/bin/firefox" />

  <property name="XMLDIRECTORY" value="${target.dir}/reports/jstestdriver" />
  <property name="SERVERADDRESS" value="http://localhost:9876" />
  <property name="BROWSERPATH" value="${defaultbrowser}" />
  <property name="TESTPATH" value="." />
  <property name="CONFIGURATIONFILE" value="jsTestDriver.conf" />

  <property name="svn.trunkUrl" value="https://js-test-driver.googlecode.com/svn/trunk"/>
  <property name="svn.tagsUrl" value="https://js-test-driver.googlecode.com/svn/tags"/>

  <target name="clean">
    <delete dir="target" />
  </target>

  <path id="classpath">
    <pathelement location="${lib.dir}/args4j-2.0.1/args4j-2.0.1.jar" />
    <pathelement location="${lib.dir}/commons-logging-1.1.1/commons-logging-1.1.1.jar" />
    <pathelement location="${lib.dir}/google-gson-1.2.3/gson-1.2.3.jar" />
    <pathelement location="${lib.dir}/guice/guice-2.0-no_aop.jar" />
    <pathelement location="${lib.dir}/guice/guice-multibindings-2.0.jar" />
    <pathelement location="${lib.dir}/jakarta-oro-2.0.8/jakarta-oro-2.0.8.jar" />
    <pathelement location="${lib.dir}/jetty/jetty-6.1.14.jar" />
    <pathelement location="${lib.dir}/jetty/jetty-util-6.1.14.jar" />
    <pathelement location="${lib.dir}/jetty/servlet-api-2.5-6.1.14.jar" />
    <pathelement location="${lib.dir}/joda-time-1.6/joda-time-1.6.jar" />
    <pathelement location="${lib.dir}/jvyaml-0.2/lib/jvyaml.jar" />
    <pathelement location="${lib.dir}/slf4j-1.5.6/slf4j-api-1.5.6.jar" />
    <pathelement location="${lib.dir}/slf4j-1.5.6/slf4j-jcl-1.5.6.jar" />
  </path>
  
  <path id="emma">
    <pathelement location="${lib.dir}/emma-2.0.5312-lib/emma.jar" />
    <pathelement location="${lib.dir}/emma-2.0.5312-lib/emma_ant.jar" />
  </path>
  
  <path id="all-source">
    <pathelement location="${src.dir}"/>
    <pathelement location="${src-test.dir}"/>
  </path>

  <path id="classpath-test">
    <pathelement location="${lib.dir}/junit/junit.jar" />
  </path>


  <path id="ant-tasks" description="Jars containing ant extensions">
    <path refid="emma"/>
    <pathelement location="${lib.dir}/testability-explorer/testability-explorer-1.3.0-r275.jar"/>
    <pathelement location="${lib.dir}/testability-explorer/ant-testability-explorer-1.3.0-r275.jar"/>
    <pathelement location="${lib.dir}/svnant-1.2.1/lib/svnant.jar"/>
    <pathelement location="${lib.dir}/svnant-1.2.1/lib/svnjavahl.jar"/>
    <pathelement location="${lib.dir}/svnant-1.2.1/lib/svnClientAdapter.jar"/>
    <pathelement location="${lib.dir}/ant-googlecode-0.0.2/ant-googlecode-0.0.2.jar"/>
  </path>

  <taskdef resource="emma_ant.properties" classpathref="ant-tasks" />
  <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="ant-tasks"/>


  <target name="init">
    <mkdir dir="${obj.dir}" />
    <mkdir dir="${obj-test.dir}" />
    <mkdir dir="${obj-debug.dir}" />
    <mkdir dir="${bin.dir}" />
    <mkdir dir="${junit.reports.dir}" />
    <mkdir dir="${jstestdriver.reports.dir}" />
    <mkdir dir="${testability-explorer.reports.dir}" />
    <mkdir dir="${emma.dir}"/>
    <mkdir dir="${emma-bin.dir}"/>
  </target>

  <macrodef name="macro-compile">
    <attribute name="destdir"/>
    <attribute name="debug" default="false" />
    <sequential>
      <javac srcdir="${src.dir}" destdir="@{destdir}" classpathref="classpath" debug="@{debug}" />
      <copy todir="@{destdir}">
        <fileset dir="${src.dir}">
          <exclude name="**/*.java" />
          <exclude name="${javascript-resources}/*.js"/>
        </fileset>
      </copy>
      <apply executable="java" dest="@{destdir}/${javascript-resources}">
        <arg value="-jar"/>
        <arg value="${lib.dir}/yuicompressor-2.4.2/build/yuicompressor-2.4.2.jar" />
        <arg value="-v" />
        <arg value="--type" />
        <arg value="js" />
        <arg value="--disable-optimizations" />
        <arg value="-o" />
        <targetfile/>
        <srcfile/>
        <fileset dir="${src.dir}/${javascript-resources}" includes="*.js" />
        <mapper type="glob" from="*.js" to="*.js"></mapper>
      </apply>
      <concat destfile="@{destdir}/${javascript-resources}/jstestdrivernamespace.js">
            <filelist dir="@{destdir}/${javascript-resources}"
            files="Namespace.js" />
      </concat>
      <concat destfile="@{destdir}/${javascript-resources}/runner.js">
        <filelist dir="@{destdir}/${javascript-resources}"
        files="Asserts.js,Utils.js,Console.js,LibLoader.js,FileLoader.js,
          CommandExecutor.js,TestRunner.js,TestCaseManager.js" />
      </concat>
      <concat destfile="@{destdir}/${javascript-resources}/heartbeatclient.js">
        <filelist dir="@{destdir}/${javascript-resources}"
        files="Utils.js,Heartbeat.js" />
      </concat>
    </sequential>
  </macrodef>

  <target name="compile" depends="init">
    <macro-compile destdir="${obj.dir}" debug="false"/>
  </target>

  <target name="compile-debug" depends="init">
    <macro-compile destdir="${obj-debug.dir}" debug="true"/>
  </target>

  <target name="compile-test" depends="compile-debug">
    <javac srcdir="${src-test.dir}" destdir="${obj-test.dir}" classpathref="classpath"
        debug="true">
      <classpath refid="classpath-test" />
      <classpath>
        <pathelement path="${obj-debug.dir}" />
      </classpath>
    </javac>
    <copy todir="${obj-test.dir}">
      <fileset dir="${src-test.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <copy todir="$obj-debug.dir}">
      <fileset dir="${src-test.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  </target>

  <target name="instrument" depends="compile-test">
    <emma>
      <instr destdir="${emma-bin.dir}"
             metadatafile="${emma.dir}/metadata.emma"
             merge="true">
        <instrpath>
          <pathelement location="${obj-debug.dir}"/>
          <pathelement location="${obj-test.dir}"/>
        </instrpath>
      </instr>
    </emma>
  </target>

  <target name="test" depends="compile-test, instrument">
    <junit printsummary="true" haltonfailure="true" fork="true">
      <classpath>
        <pathelement location="${emma-bin.dir}" />
      </classpath>
      <classpath refid="emma" />
      <classpath refid="classpath" />
      <classpath refid="classpath-test" />
      <classpath>
        <pathelement location="${obj-debug.dir}" />
        <pathelement location="${obj-test.dir}" />
      </classpath>
      <jvmarg value="-Demma.coverage.out.file=${emma.dir}/test.emma" />
      <jvmarg value="-Demma.coverage.out.merge=true" />
      <formatter type="xml" usefile="true" />
      <batchtest fork="true" haltonfailure="true" todir="${junit.reports.dir}">
        <fileset dir="${src-test.dir}">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="coverage" depends="test">
    <emma>
      <report>
        <sourcepath>
          <pathelement location="${src.dir}"/>
          <pathelement location="${src-test.dir}"/>
        </sourcepath>
        <fileset dir="${emma.dir}" >
          <include name="*.emma" />
        </fileset>
        <txt outfile="${emma-reports.dir}/coverage.txt" />
        <html outfile="${emma-reports.dir}/coverage.html" />
        <xml outfile="${emma-reports.dir}/coverage.xml" />
      </report>
    </emma>
  </target>

  <target name="jar" depends="compile">
    <jar destfile="${bin.dir}/${ant.project.name}.jar" basedir="${obj.dir}" excludes="**/*.js"
      duplicate="preserve">
      <manifest>
        <attribute name="Main-Class" value="${main-class}" />
      </manifest>
      <zipfileset src="${lib.dir}/jetty/servlet-api-2.5-6.1.14.jar" />
      <zipfileset src="${lib.dir}/jetty/jetty-6.1.14.jar" />
      <zipfileset src="${lib.dir}/jetty/jetty-util-6.1.14.jar" />
      <zipfileset src="${lib.dir}/google-gson-1.2.3/gson-1.2.3.jar" />
      <zipfileset src="${lib.dir}/guice/guice-2.0-no_aop.jar" />
      <zipfileset src="${lib.dir}/guice/guice-multibindings-2.0.jar" />
      <zipfileset src="${lib.dir}/args4j-2.0.1/args4j-2.0.1.jar" />
      <zipfileset src="${lib.dir}/joda-time-1.6/joda-time-1.6.jar" />
      <zipfileset src="${lib.dir}/jvyaml-0.2/lib/jvyaml.jar" />
      <zipfileset src="${lib.dir}/jakarta-oro-2.0.8/jakarta-oro-2.0.8.jar" />
      <zipfileset src="${lib.dir}/commons-logging-1.1.1/commons-logging-1.1.1.jar" />
      <zipfileset src="${lib.dir}/slf4j-1.5.6/slf4j-api-1.5.6.jar" />
      <zipfileset src="${lib.dir}/slf4j-1.5.6/slf4j-jcl-1.5.6.jar" />
      <fileset dir="${obj.dir}/">
        <include name="${javascript-resources}/jstestdrivernamespace.js" />
        <include name="${javascript-resources}/runner.js" />
        <include name="${javascript-resources}/heartbeatclient.js" />
        <include name="${javascript-resources}/lib/*.js" />
      </fileset>
    </jar>
  </target>

  <!-- TODO: also have a JNLP launcher for the CBuild latest code - set deploy.codebase to
             http://build.hevery.com/job/JsTestDriver/lastSuccessfulBuild/artifact/target/bin -->
  <property name="deploy.codebase" value="http://www.corp.google.com/~alexeagle/jstestdriver"/>
  <target name="sign" depends="jar">
    <copy todir="${bin.dir}" file="src/com/google/jstestdriver/ui/JsTestDriver.jnlp">
      <filterset><filter token="{codebase}" value="${deploy.codebase}"/></filterset>
    </copy>
    <!-- to generate a self-signed key, do this:
    $ keytool -genkey -alias $USERNAME-key -keypass google
    $ keytool -selfcert -alias ${USERNAME}-key
    -->
    <signjar jar="${bin.dir}/${ant.project.name}.jar" alias="${user.name}-key" storepass="google"/>
  </target>

  <target name="checkNoLocalChanges">
    <input message="Releases must be cut from a clean checkout. OK to revert all local changes?? "
        addproperty="revertok" validargs="Y,n" defaultvalue="n"/>
    <fail message="Release aborted by user.">
      <condition><not><equals arg1="Y" arg2="${revertok}"/></not></condition>
    </fail>
    <svn>
      <revert dir="." recurse="true"/>
    </svn>
    
  </target>

  <target name="release" depends="checkNoLocalChanges, test, jar, sign">
    <input addproperty="release.id" message="Enter the release number (ie. 1.0.0-rc1):"/>

    <svn>
      <copy srcurl="${svn.trunkUrl}" desturl="${svn.tagsUrl}/${release.id}"
            message="Performing release ${release.id}"/>
    </svn>

    <echo message="Uploading release to the GoogleCode site..."/>
    <input addproperty="googlecode.username" message="Your google account (don't include @gmail.com):"/>
    <input addproperty="googlecode.password" message="Your googlecode password (http://code.google.com/hosting/settings):"/>

    <taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
             classpathref="ant-tasks" name="gcupload"/>
    <gcupload labels="Featured, Type-Executable" filename="${bin.dir}/${ant.project.name}.jar"
              targetfilename="${ant.project.name}-${release.id}.jar"
              username="${googlecode.username}" password="${googlecode.password}"
              projectname="js-test-driver" summary="Self-contained executable jar"/>
    <gcupload labels="Featured, Type-Executable" filename="${bin.dir}/JsTestDriver.jnlp"
              targetfilename="JsTestDriver-${release.id}.jnlp"
              username="${googlecode.username}" password="${googlecode.password}"
              projectname="js-test-driver" summary="Java WebStart link for the GUI application"/>
    <echo message="Release has been deployed. You should now remove the 'featured' label from the previous release on the googlecode site."/>
  </target>

  <target name="src-jar" depends="init">
    <jar destfile="${bin.dir}/${ant.project.name}-src.jar" basedir="${src.dir}" />
  </target>

  <target name="jstestdriver" depends="jar">
    <java jar="${bin.dir}/${ant.project.name}.jar" fork="true" timeout="60000">
      <arg value="--port" />
      <arg value="4224" />
      <arg value="--browser" />
      <arg value="${BROWSERPATH}" />
      <arg value="--tests" />
      <arg value="all" />
      <arg value="--testOutput" />
      <arg value="${XMLDIRECTORY}"/>
    </java>
  </target>

  <target name="js-test-server" depends="jar">
    <java jar="${bin.dir}/${ant.project.name}.jar" fork="true" dir=".">
      <arg value="--port"/>
      <arg value="4224"/>
    </java>
  </target>

  <target name="js-test">
    <java jar="${bin.dir}/${ant.project.name}.jar" fork="true" dir=".">
      <arg value="--server"/>
      <arg value="http://localhost:4224"/>
      <arg value="--runAllTests"/>
    </java>
  </target>

  <target name="run" depends="jar">
    <java jar="${bin.dir}/${ant.project.name}.jar" fork="true">
      <arg value="--browserPath" />
      <arg value="${BROWSERPATH}" />
      <arg value="--testPath" />
      <arg value="${TESTPATH}" />
    </java>
  </target>

  <target name="cbuild" depends="clean, testability-explorer, jstestdriver, test, coverage" />

  <target name="testability-explorer" depends="jar">
    <taskdef name="testability" classname="com.google.ant.TestabilityTask" classpathref="ant-tasks"/>
    <testability print="xml" resultFile="${testability-explorer.reports.dir}/te.xml" whitelist="!com.google.jstestdriver">
      <classpath>
        <pathelement location="${bin.dir}/${ant.project.name}.jar"/>
        <pathelement location="src" />
      </classpath>
    </testability>
  </target>

</project>
