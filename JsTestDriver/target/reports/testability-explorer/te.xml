<?xml version="1.0" encoding="UTF-8"?>
<testability excellent="203" good="2" needsWork="1" overall="16">
    <class
        class="com.google.jstestdriver.directoryscanner.DirectoryScanner" cost="153">
        <method cyclomatic="50" global="2" line="118" lod="0"
            name="com.google.jstestdriver.directoryscanner.DirectoryScanner()" overall="70">
            <cost cyclomatic="49" global="0" line="118" lod="0"
                method="boolean isFamily(java.lang.String)" overall="49" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="0" global="1" line="162" lod="0"
                overall="10" reason="dependency on global mutable state"/>
            <cost cyclomatic="1" global="1" line="164" lod="0"
                method="void resetDefaultExcludes()" overall="11" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="50" global="2" line="358" lod="0"
            name="com.google.jstestdriver.directoryscanner.DirectoryScanner()" overall="70">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="178" global="2" line="1127" lod="0"
            name="void accountForIncludedDir(java.lang.String, java.io.File, boolean)" overall="198">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1128" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1128" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1128" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="5" global="0" line="1127" lod="0"
                method="void processIncluded(java.lang.String, java.io.File, java.util.Vector, java.util.Vector, java.util.Vector)"
                overall="5" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="114" global="0" line="1128" lod="0"
                method="boolean contentsExcluded(java.lang.String)"
                overall="114" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="195" global="2" line="1133" lod="0"
            name="void accountForIncludedDir(java.lang.String, java.io.File, boolean, java.lang.String[])" overall="215">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1134" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1134" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1134" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="5" global="0" line="1133" lod="0"
                method="void processIncluded(java.lang.String, java.io.File, java.util.Vector, java.util.Vector, java.util.Vector)"
                overall="5" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="114" global="0" line="1134" lod="0"
                method="boolean contentsExcluded(java.lang.String)"
                overall="114" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="17" global="0" line="1135" lod="0"
                method="void scandir(java.io.File, java.lang.String, boolean, java.lang.String[])"
                overall="17" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="61" global="2" line="1116" lod="0"
            name="void accountForIncludedFile(java.lang.String, java.io.File)" overall="81">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="5" global="0" line="1116" lod="0"
                method="void processIncluded(java.lang.String, java.io.File, java.util.Vector, java.util.Vector, java.util.Vector)"
                overall="5" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="51" global="2" line="502" lod="0"
            name="boolean addDefaultExclude(java.lang.String)" overall="71">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="502" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="59" global="2" line="1469" lod="0"
            name="void addDefaultExcludes()" overall="79">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1469" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1472" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1476" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="61" global="2" line="683" lod="0"
            name="void addExcludes(java.lang.String[])" overall="81">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="683" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="683" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="684" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="684" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="689" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="259" global="2" line="831" lod="0"
            name="void checkIncludePatterns()" overall="279">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="861" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="890" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="834" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="835" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="837" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="837" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="842" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="849" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="849" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="858" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="865" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="868" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="868" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="874" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="879" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="883" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="883" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="885" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="885" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="894" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="894" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="894" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="896" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="896" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="899" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="905" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="905" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="906" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="906" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="910" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="911" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="911" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="915" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="916" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="926" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="929" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="16" global="0" line="835" lod="0"
                method="boolean isAbsolutePath(java.lang.String)"
                overall="16" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="75" global="0" line="837" lod="0"
                method="boolean matchPatternStart(java.lang.String, java.lang.String, boolean)"
                overall="75" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="6" global="0" line="846" lod="0"
                method="java.lang.String rtrimWildcardTokens(java.lang.String)"
                overall="6" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="9" global="0" line="879" lod="0"
                method="java.lang.String removeLeadingPath(java.io.File, java.io.File)"
                overall="9" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="17" global="0" line="895" lod="0"
                method="java.io.File findFile(java.io.File, java.lang.String, boolean)"
                overall="17" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="6" global="0" line="906" lod="0"
                method="boolean isSymlink(java.io.File, java.lang.String)"
                overall="6" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="38" global="0" line="913" lod="0"
                method="void accountForIncludedDir(java.lang.String, java.io.File, boolean)"
                overall="38" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="56" global="2" line="1632" lod="0"
            name="void clearCaches()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="57" global="2" line="942" lod="0"
            name="void clearResults()" overall="77">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="950" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="170" global="2" line="1245" lod="0"
            name="boolean contentsExcluded(java.lang.String)" overall="190">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1245" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1246" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1248" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1248" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="110" global="0" line="1248" lod="0"
                method="boolean matchPath(java.lang.String, java.lang.String, boolean)"
                overall="110" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="157" global="2" line="1189" lod="0"
            name="boolean couldHoldIncluded(java.lang.String)" overall="177">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1189" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1190" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1190" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1190" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="91" global="0" line="1190" lod="0"
                method="boolean matchPatternStart(java.lang.String, java.lang.String, boolean)"
                overall="91" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="2" global="0" line="1190" lod="0"
                method="boolean isMorePowerfulThanExcludes(java.lang.String, java.lang.String)"
                overall="2" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="4" global="0" line="1190" lod="0"
                method="boolean isDeeper(java.lang.String, java.lang.String)"
                overall="4" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="63" global="2" line="1647" lod="0"
            name="void ensureNonPatternSetsReady()" overall="83">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1647" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="6" global="0" line="1648" lod="0"
                method="java.lang.String[] fillNonPatternSet(java.util.Set, java.lang.String[])"
                overall="6" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="62" global="2" line="1663" lod="0"
            name="java.lang.String[] fillNonPatternSet(java.util.Set, java.lang.String[])" overall="82">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1664" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1665" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1666" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1672" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="2" global="0" line="1665" lod="0"
                method="boolean hasWildcards(java.lang.String)"
                overall="2" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="109" global="2" line="1514" lod="0"
            name="java.io.File findFile(java.io.File, java.lang.String, boolean)" overall="129">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1514" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1515" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1522" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="16" global="0" line="1514" lod="0"
                method="boolean isAbsolutePath(java.lang.String)"
                overall="16" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="13" global="0" line="1529" lod="0"
                method="java.util.Vector tokenizePath(java.lang.String)"
                overall="13" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="12" global="0" line="1529" lod="0"
                method="java.io.File findFile(java.io.File, java.util.Vector, boolean)"
                overall="12" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="6" global="0" line="1520" lod="0"
                method="java.io.File normalize(java.lang.String)"
                overall="6" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="3" global="0" line="1521" lod="0"
                method="java.lang.String removeLeadingPath(java.io.File, java.io.File)"
                overall="3" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="68" global="2" line="1544" lod="0"
            name="java.io.File findFile(java.io.File, java.util.Vector, boolean)" overall="88">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1544" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1548" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1551" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1555" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1559" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1560" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1561" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1562" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1562" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1562" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="2" global="0" line="1554" lod="0"
                method="java.lang.String[] list(java.io.File)"
                overall="2" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="56" global="2" line="567" lod="0"
            name="java.io.File getBasedir()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="50" global="2" line="488" lod="0"
            name="java.lang.String[] getDefaultExcludes()" overall="70">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="56" global="2" line="1459" lod="0"
            name="java.lang.String[] getDeselectedDirectories()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="56" global="2" line="1376" lod="0"
            name="java.lang.String[] getDeselectedFiles()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="56" global="2" line="1441" lod="0"
            name="java.lang.String[] getExcludedDirectories()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="56" global="2" line="1358" lod="0"
            name="java.lang.String[] getExcludedFiles()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="57" global="2" line="1391" lod="0"
            name="java.lang.String[] getIncludedDirectories()" overall="77">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1391" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="57" global="2" line="1406" lod="0"
            name="int getIncludedDirsCount()" overall="77">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1406" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="57" global="2" line="1308" lod="0"
            name="java.lang.String[] getIncludedFiles()" overall="77">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1308" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="57" global="2" line="1323" lod="0"
            name="int getIncludedFilesCount()" overall="77">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1323" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="56" global="2" line="1423" lod="0"
            name="java.lang.String[] getNotIncludedDirectories()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="56" global="2" line="1340" lod="0"
            name="java.lang.String[] getNotIncludedFiles()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="56" global="2" line="1623" lod="0"
            name="java.util.Set getScannedDirs()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="57" global="2" line="1614" lod="0"
            name="boolean hasBeenScanned(java.lang.String)" overall="77">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1614" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="56" global="2" line="577" lod="0"
            name="boolean isCaseSensitive()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="87" global="2" line="1208" lod="0"
            name="boolean isDeeper(java.lang.String, java.lang.String)" overall="107">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1210" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1210" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="29" global="0" line="1208" lod="0"
                method="java.util.Vector tokenizePath(java.lang.String)"
                overall="29" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="56" global="2" line="735" lod="0"
            name="boolean isEverythingIncluded()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="178" global="2" line="1265" lod="0"
            name="boolean isExcluded(java.lang.String)" overall="198">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1267" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1267" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1267" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1272" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1273" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="7" global="0" line="1265" lod="0"
                method="void ensureNonPatternSetsReady()" overall="7" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="110" global="0" line="1273" lod="0"
                method="boolean matchPath(java.lang.String, java.lang.String, boolean)"
                overall="110" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="56" global="2" line="610" lod="0"
            name="boolean isFollowSymlinks()" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="178" global="2" line="1165" lod="0"
            name="boolean isIncluded(java.lang.String)" overall="198">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1167" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1167" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1167" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1172" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1173" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="7" global="0" line="1165" lod="0"
                method="void ensureNonPatternSetsReady()" overall="7" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="110" global="0" line="1173" lod="0"
                method="boolean matchPath(java.lang.String, java.lang.String, boolean)"
                overall="110" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="58" global="2" line="1230" lod="0"
            name="boolean isMorePowerfulThanExcludes(java.lang.String, java.lang.String)" overall="78">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1231" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1232" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="59" global="2" line="1289" lod="0"
            name="boolean isSelected(java.lang.String, java.io.File)" overall="79">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1289" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1290" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1291" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="91" global="2" line="1579" lod="0"
            name="boolean isSymlink(java.io.File, java.lang.String)" overall="111">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="29" global="0" line="1579" lod="0"
                method="java.util.Vector tokenizePath(java.lang.String)"
                overall="29" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="6" global="0" line="1579" lod="0"
                method="boolean isSymlink(java.io.File, java.util.Vector)"
                overall="6" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="62" global="2" line="1590" lod="0"
            name="boolean isSymlink(java.io.File, java.util.Vector)" overall="82">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1595" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1590" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1593" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1593" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="2" global="0" line="1593" lod="0"
                method="boolean isSymbolicLink(java.io.File, java.lang.String)"
                overall="2" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="58" global="2" line="1492" lod="0"
            name="java.lang.String[] list(java.io.File)" overall="78">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1493" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1495" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="96" global="2" line="452" lod="0"
            name="boolean match(java.lang.String, java.lang.String)" overall="116">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="46" global="0" line="452" lod="0"
                method="boolean match(java.lang.String, java.lang.String)"
                overall="46" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="96" global="2" line="474" lod="0"
            name="boolean match(java.lang.String, java.lang.String, boolean)" overall="116">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="46" global="0" line="474" lod="0"
                method="boolean match(java.lang.String, java.lang.String, boolean)"
                overall="46" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="160" global="2" line="416" lod="0"
            name="boolean matchPath(java.lang.String, java.lang.String)" overall="180">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="110" global="0" line="416" lod="0"
                method="boolean matchPath(java.lang.String, java.lang.String)"
                overall="110" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="160" global="2" line="434" lod="0"
            name="boolean matchPath(java.lang.String, java.lang.String, boolean)" overall="180">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="110" global="0" line="434" lod="0"
                method="boolean matchPath(java.lang.String, java.lang.String, boolean)"
                overall="110" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="141" global="2" line="378" lod="0"
            name="boolean matchPatternStart(java.lang.String, java.lang.String)" overall="161">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="91" global="0" line="378" lod="0"
                method="boolean matchPatternStart(java.lang.String, java.lang.String)"
                overall="91" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="141" global="2" line="401" lod="0"
            name="boolean matchPatternStart(java.lang.String, java.lang.String, boolean)" overall="161">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="91" global="0" line="401" lod="0"
                method="boolean matchPatternStart(java.lang.String, java.lang.String, boolean)"
                overall="91" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="51" global="2" line="710" lod="0"
            name="java.lang.String normalizePattern(java.lang.String)" overall="71">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="712" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="61" global="2" line="1142" lod="0"
            name="void processIncluded(java.lang.String, java.io.File, java.util.Vector, java.util.Vector, java.util.Vector)" overall="81">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1142" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1142" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1142" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1145" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1147" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="58" global="2" line="1010" lod="0"
            name="void processSlowScan(java.lang.String[])" overall="78">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1010" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1011" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="50" global="2" line="521" lod="0"
            name="boolean removeDefaultExclude(java.lang.String)" overall="70">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="50" global="2" line="530" lod="0"
            name="void resetDefaultExcludes()" overall="70">
            <cost cyclomatic="49" global="1" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="59" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="531" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="0" global="1" line="530" lod="0"
                overall="10" reason="dependency on global mutable state"/>
        </method>
        <method cyclomatic="278" global="2" line="749" lod="0"
            name="void scan()" overall="298">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="754" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="750" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="751" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="758" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="771" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="772" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="773" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="774" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="776" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="778" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="782" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="783" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="791" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="795" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="799" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="800" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="801" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="814" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="815" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="203" global="0" line="812" lod="0"
                method="void checkIncludePatterns()" overall="203" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="199" global="2" line="1039" lod="0"
            name="void scandir(java.io.File, java.lang.String, boolean)" overall="219">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1039" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1043" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1044" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1046" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="139" global="0" line="1053" lod="0"
                method="void scandir(java.io.File, java.lang.String, boolean, java.lang.String[])"
                overall="139" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="195" global="2" line="1057" lod="0"
            name="void scandir(java.io.File, java.lang.String, boolean, java.lang.String[])" overall="215">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="1072" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1057" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1057" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1060" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1062" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1064" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1067" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1082" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1086" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1087" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1094" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1099" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1099" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1103" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="1057" lod="0"
                method="boolean hasBeenScanned(java.lang.String)"
                overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="2" global="0" line="1064" lod="0"
                method="boolean isSymbolicLink(java.io.File, java.lang.String)"
                overall="2" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="5" global="0" line="1088" lod="0"
                method="void accountForIncludedFile(java.lang.String, java.io.File)"
                overall="5" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="117" global="0" line="1095" lod="0"
                method="void accountForIncludedDir(java.lang.String, java.io.File, boolean, java.lang.String[])"
                overall="117" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="56" global="2" line="557" lod="0"
            name="void setBasedir(java.io.File)" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="58" global="2" line="545" lod="0"
            name="void setBasedir(java.lang.String)" overall="78">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="56" global="2" line="588" lod="0"
            name="void setCaseSensitive(boolean)" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="56" global="2" line="599" lod="0"
            name="void setErrorOnMissingDir(boolean)" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="61" global="2" line="659" lod="0"
            name="void setExcludes(java.lang.String[])" overall="81">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="659" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="663" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="664" lod="0"
                method="java.lang.String normalizePattern(java.lang.String)"
                overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="659" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="663" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="56" global="2" line="619" lod="0"
            name="void setFollowSymlinks(boolean)" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="60" global="2" line="636" lod="0"
            name="void setIncludes(java.lang.String[])" overall="80">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="636" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="640" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="636" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="640" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="56" global="2" line="724" lod="0"
            name="void setSelectors(com.google.jstestdriver.directoryscanner.FileSelector[])" overall="76">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
        </method>
        <method cyclomatic="68" global="2" line="963" lod="0"
            name="void slowScan()" overall="88">
            <cost cyclomatic="50" global="2" line="118" lod="0"
                method="com.google.jstestdriver.directoryscanner.DirectoryScanner()"
                overall="70" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                method="void setBasedir(java.lang.String)" overall="1" reason="implicit cost calling all setters"/>
            <cost cyclomatic="3" global="0" line="659" lod="0"
                method="void setExcludes(java.lang.String[])"
                overall="3" reason="implicit cost calling all setters"/>
            <cost cyclomatic="2" global="0" line="636" lod="0"
                method="void setIncludes(java.lang.String[])"
                overall="2" reason="implicit cost calling all setters"/>
            <cost cyclomatic="1" global="0" line="971" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="964" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="967" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="968" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="983" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="984" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="985" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="986" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="997" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="998" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="2" global="0" line="994" lod="0"
                method="void processSlowScan(java.lang.String[])"
                overall="2" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class
        class="com.google.jstestdriver.directoryscanner.SelectorUtils" cost="90">
        <method cyclomatic="0" global="1" line="36" lod="0"
            name="com.google.jstestdriver.directoryscanner.SelectorUtils()" overall="10">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                overall="10" reason="dependency on global mutable state"/>
        </method>
        <method cyclomatic="0" global="1" line="42" lod="0"
            name="void &lt;init>()" overall="10">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="0" global="1" line="50" lod="0"
            name="com.google.jstestdriver.directoryscanner.SelectorUtils getInstance()" overall="10">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="2" global="1" line="612" lod="0"
            name="boolean hasWildcards(java.lang.String)" overall="12">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="612" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="612" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="1" line="575" lod="0"
            name="boolean isOutOfDate(java.io.File, java.io.File, int)" overall="13">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="575" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="578" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="581" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="46" global="1" line="304" lod="0"
            name="boolean match(java.lang.String, java.lang.String)" overall="56">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="46" global="0" line="304" lod="0"
                method="boolean match(java.lang.String, java.lang.String, boolean)"
                overall="46" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="46" global="1" line="326" lod="0"
            name="boolean match(java.lang.String, java.lang.String, boolean)" overall="56">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="335" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="336" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="342" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="344" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="347" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="349" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="350" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="350" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="353" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="353" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="362" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="367" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="367" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="368" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="369" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="369" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="372" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="372" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="380" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="383" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="384" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="392" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="392" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="393" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="394" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="394" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="397" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="397" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="405" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="408" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="409" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="418" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="418" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="420" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="421" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="426" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="437" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="438" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="440" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="441" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="441" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="445" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="445" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="457" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="467" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="468" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="110" global="1" line="151" lod="0"
            name="boolean matchPath(java.lang.String, java.lang.String)" overall="120">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="110" global="0" line="151" lod="0"
                method="boolean matchPath(java.lang.String, java.lang.String, boolean)"
                overall="110" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="110" global="1" line="169" lod="0"
            name="boolean matchPath(java.lang.String, java.lang.String, boolean)" overall="120">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="178" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="178" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="180" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="183" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="191" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="193" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="194" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="202" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="211" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="211" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="213" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="216" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="224" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="226" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="227" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="236" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="236" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="238" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="239" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="244" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="255" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="256" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="259" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="268" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="278" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="279" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="38" global="0" line="169" lod="0"
                method="java.lang.String[] tokenizePathAsArray(java.lang.String)"
                overall="38" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="46" global="0" line="183" lod="0"
                method="boolean match(java.lang.String, java.lang.String, boolean)"
                overall="46" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="91" global="1" line="70" lod="0"
            name="boolean matchPatternStart(java.lang.String, java.lang.String)" overall="101">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="91" global="0" line="70" lod="0"
                method="boolean matchPatternStart(java.lang.String, java.lang.String, boolean)"
                overall="91" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="91" global="1" line="97" lod="0"
            name="boolean matchPatternStart(java.lang.String, java.lang.String, boolean)" overall="101">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="97" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="111" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="111" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="113" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="116" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="126" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="129" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="38" global="0" line="102" lod="0"
                method="java.lang.String[] tokenizePathAsArray(java.lang.String)"
                overall="38" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="46" global="0" line="116" lod="0"
                method="boolean match(java.lang.String, java.lang.String, boolean)"
                overall="46" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="2" global="1" line="596" lod="0"
            name="java.lang.String removeWhitespace(java.lang.String)" overall="12">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="597" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="599" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="44" global="1" line="621" lod="0"
            name="java.lang.String rtrimWildcardTokens(java.lang.String)" overall="54">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="623" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="624" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="627" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="627" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="38" global="0" line="621" lod="0"
                method="java.lang.String[] tokenizePathAsArray(java.lang.String)"
                overall="38" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="2" global="0" line="624" lod="0"
                method="boolean hasWildcards(java.lang.String)"
                overall="2" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="29" global="1" line="484" lod="0"
            name="java.util.Vector tokenizePath(java.lang.String)" overall="39">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="29" global="0" line="484" lod="0"
                method="java.util.Vector tokenizePath(java.lang.String, java.lang.String)"
                overall="29" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="29" global="1" line="497" lod="0"
            name="java.util.Vector tokenizePath(java.lang.String, java.lang.String)" overall="39">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="498" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="504" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="16" global="0" line="498" lod="0"
                method="boolean isAbsolutePath(java.lang.String)"
                overall="16" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="11" global="0" line="499" lod="0"
                method="java.lang.String[] dissect(java.lang.String)"
                overall="11" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="38" global="1" line="514" lod="0"
            name="java.lang.String[] tokenizePathAsArray(java.lang.String)" overall="48">
            <cost cyclomatic="0" global="1" line="36" lod="0"
                method="com.google.jstestdriver.directoryscanner.SelectorUtils()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="515" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="524" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="525" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="526" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="532" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="535" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="537" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="544" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="545" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="546" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="553" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="16" global="0" line="515" lod="0"
                method="boolean isAbsolutePath(java.lang.String)"
                overall="16" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="11" global="0" line="516" lod="0"
                method="java.lang.String[] dissect(java.lang.String)"
                overall="11" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.directoryscanner.FileUtils" cost="58">
        <method cyclomatic="49" global="0" line="33" lod="0"
            name="com.google.jstestdriver.directoryscanner.FileUtils()" overall="49">
            <cost cyclomatic="49" global="0" line="35" lod="0"
                method="boolean isFamily(java.lang.String)" overall="49" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="49" global="0" line="71" lod="0"
            name="com.google.jstestdriver.directoryscanner.FileUtils()" overall="49">
            <cost cyclomatic="49" global="0" line="33" lod="0"
                method="com.google.jstestdriver.directoryscanner.FileUtils()"
                overall="49" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="76" global="0" line="170" lod="0"
            name="java.lang.String[] dissect(java.lang.String)" overall="76">
            <cost cyclomatic="49" global="0" line="33" lod="0"
                method="com.google.jstestdriver.directoryscanner.FileUtils()"
                overall="49" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="174" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="179" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="179" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="179" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="186" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="190" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="191" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="191" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="196" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="196" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="200" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="16" global="0" line="174" lod="0"
                method="boolean isAbsolutePath(java.lang.String)"
                overall="16" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="49" global="0" line="65" lod="0"
            name="com.google.jstestdriver.directoryscanner.FileUtils getFileUtils()" overall="49">
            <cost cyclomatic="49" global="0" line="33" lod="0"
                method="com.google.jstestdriver.directoryscanner.FileUtils()"
                overall="49" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="65" global="0" line="85" lod="0"
            name="boolean isAbsolutePath(java.lang.String)" overall="65">
            <cost cyclomatic="49" global="0" line="33" lod="0"
                method="com.google.jstestdriver.directoryscanner.FileUtils()"
                overall="49" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="86" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="92" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="92" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="93" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="95" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="97" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="97" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="97" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="102" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="102" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="105" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="105" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="105" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="105" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="105" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="105" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="51" global="0" line="225" lod="0"
            name="boolean isSymbolicLink(java.io.File, java.lang.String)" overall="51">
            <cost cyclomatic="49" global="0" line="33" lod="0"
                method="com.google.jstestdriver.directoryscanner.FileUtils()"
                overall="49" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="225" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="231" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="55" global="0" line="130" lod="0"
            name="java.io.File normalize(java.lang.String)" overall="55">
            <cost cyclomatic="49" global="0" line="33" lod="0"
                method="com.google.jstestdriver.directoryscanner.FileUtils()"
                overall="49" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="135" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="137" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="140" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="141" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="151" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="152" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="52" global="0" line="246" lod="0"
            name="java.lang.String removeLeadingPath(java.io.File, java.io.File)" overall="52">
            <cost cyclomatic="49" global="0" line="33" lod="0"
                method="com.google.jstestdriver.directoryscanner.FileUtils()"
                overall="49" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="248" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="253" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="256" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.directoryscanner.Os" cost="49">
        <method cyclomatic="0" global="0" line="28" lod="0"
            name="com.google.jstestdriver.directoryscanner.Os()" overall="0"/>
        <method cyclomatic="0" global="0" line="104" lod="0"
            name="com.google.jstestdriver.directoryscanner.Os()" overall="0"/>
        <method cyclomatic="0" global="0" line="112" lod="0"
            name="com.google.jstestdriver.directoryscanner.Os(java.lang.String)" overall="0"/>
        <method cyclomatic="49" global="0" line="173" lod="0"
            name="boolean eval()" overall="49">
            <cost cyclomatic="49" global="0" line="173" lod="0"
                method="boolean isOs(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
                overall="49" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="49" global="0" line="208" lod="0"
            name="boolean isArch(java.lang.String)" overall="49">
            <cost cyclomatic="49" global="0" line="208" lod="0"
                method="boolean isOs(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
                overall="49" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="49" global="0" line="184" lod="0"
            name="boolean isFamily(java.lang.String)" overall="49">
            <cost cyclomatic="49" global="0" line="184" lod="0"
                method="boolean isOs(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
                overall="49" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="49" global="0" line="196" lod="0"
            name="boolean isName(java.lang.String)" overall="49">
            <cost cyclomatic="49" global="0" line="196" lod="0"
                method="boolean isOs(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
                overall="49" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="49" global="0" line="236" lod="0"
            name="boolean isOs(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" overall="49">
            <cost cyclomatic="1" global="0" line="238" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="238" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="238" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="238" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="246" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="250" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="253" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="255" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="255" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="255" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="255" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="261" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="263" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="265" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="266" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="266" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="267" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="268" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="268" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="269" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="270" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="271" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="272" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="273" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="274" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="274" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="275" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="276" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="277" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="278" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="279" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="280" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="280" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="280" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="280" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="283" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="284" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="284" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="286" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="287" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="288" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="289" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="296" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="299" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="302" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="305" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="305" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="305" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="305" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="49" global="0" line="220" lod="0"
            name="boolean isVersion(java.lang.String)" overall="49">
            <cost cyclomatic="49" global="0" line="220" lod="0"
                method="boolean isOs(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
                overall="49" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="0" global="0" line="153" lod="0"
            name="void setArch(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="135" lod="0"
            name="void setFamily(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="144" lod="0"
            name="void setName(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="162" lod="0"
            name="void setVersion(java.lang.String)" overall="0"/>
    </class>
    <class class="com.google.jstestdriver.JsTestDriverServer" cost="44">
        <method cyclomatic="0" global="0" line="47" lod="0"
            name="com.google.jstestdriver.JsTestDriverServer()" overall="0"/>
        <method cyclomatic="0" global="0" line="61" lod="0"
            name="com.google.jstestdriver.JsTestDriverServer(int, com.google.jstestdriver.CapturedBrowsers, com.google.jstestdriver.FilesCache, com.google.jstestdriver.URLTranslator, com.google.jstestdriver.URLRewriter)" overall="0"/>
        <method cyclomatic="0" global="0" line="96" lod="0"
            name="void addServlet(java.lang.String, javax.servlet.Servlet)" overall="0"/>
        <method cyclomatic="0" global="0" line="100" lod="0"
            name="void initJetty(int)" overall="0"/>
        <method cyclomatic="0" global="0" line="72" lod="0"
            name="void initServlets()" overall="0"/>
        <method cyclomatic="45" global="0" line="134" lod="0"
            name="void main(java.lang.String[])" overall="45">
            <cost cyclomatic="1" global="0" line="158" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="142" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="143" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="3" global="0" line="136" lod="0"
                method="com.google.jstestdriver.Flags parseArgument(java.lang.String[])"
                overall="3" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="157" lod="0"
                method="void runActions()" overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="27" global="0" line="146" lod="0"
                method="com.google.jstestdriver.config.Configuration parse(java.io.File, java.io.Reader)"
                overall="27" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="11" global="0" line="147" lod="0"
                method="java.util.List load(java.util.List)"
                overall="11" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="1" global="0" line="110" lod="0"
            name="void start()" overall="1">
            <cost cyclomatic="1" global="0" line="113" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="1" global="0" line="120" lod="0"
            name="void stop()" overall="1">
            <cost cyclomatic="1" global="0" line="123" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
    </class>
    <class
        class="com.google.jstestdriver.RunTestsActionResponseStream$1" cost="32">
        <method cyclomatic="2" global="3" line="41" lod="0"
            name="com.google.jstestdriver.RunTestsActionResponseStream$1()" overall="32">
            <cost cyclomatic="1" global="0" line="-1" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="-1" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="0" global="1" line="41" lod="0"
                overall="10" reason="dependency on global mutable state"/>
            <cost cyclomatic="0" global="1" line="41" lod="0"
                overall="10" reason="dependency on global mutable state"/>
            <cost cyclomatic="0" global="1" line="41" lod="0"
                overall="10" reason="dependency on global mutable state"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.BrowserQueryResponseServlet" cost="29">
        <method cyclomatic="0" global="0" line="37" lod="0"
            name="com.google.jstestdriver.BrowserQueryResponseServlet()" overall="0"/>
        <method cyclomatic="0" global="0" line="52" lod="0"
            name="com.google.jstestdriver.BrowserQueryResponseServlet(com.google.jstestdriver.CapturedBrowsers, com.google.jstestdriver.URLTranslator, com.google.jstestdriver.ForwardingMapper)" overall="0"/>
        <method cyclomatic="0" global="0" line="60" lod="0"
            name="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" overall="0"/>
        <method cyclomatic="16" global="0" line="66" lod="13"
            name="void service(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.io.PrintWriter)" overall="29">
            <cost cyclomatic="1" global="0" line="68" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="70" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="70" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="73" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="77" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="81" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="84" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="92" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="104" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="112" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="118" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="121" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="128" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="0" global="0" line="69" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="70" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="1" global="0" line="73" lod="0"
                method="com.google.jstestdriver.Response$ResponseType getResponseType()"
                overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="0" global="0" line="113" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="116" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="126" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="74" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="74" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="103" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="119" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="122" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="128" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="91" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="2" global="0" line="85" lod="0"
                method="java.lang.String getBasePath()" overall="2" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="0" global="0" line="95" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.TestResult" cost="25">
        <method cyclomatic="0" global="0" line="57" lod="0"
            name="com.google.jstestdriver.TestResult()" overall="0"/>
        <method cyclomatic="0" global="0" line="47" lod="0"
            name="com.google.jstestdriver.TestResult(com.google.jstestdriver.BrowserInfo, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, float)" overall="0"/>
        <method cyclomatic="28" global="0" line="130" lod="0"
            name="boolean equals(java.lang.Object)" overall="28">
            <cost cyclomatic="1" global="0" line="130" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="132" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="134" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="137" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="138" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="140" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="142" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="143" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="145" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="147" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="148" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="150" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="152" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="153" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="155" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="157" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="158" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="160" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="162" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="163" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="165" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="167" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="168" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="170" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="172" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="173" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="175" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="177" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="0" global="0" line="101" lod="0"
            name="com.google.jstestdriver.BrowserInfo getBrowserInfo()" overall="0"/>
        <method cyclomatic="0" global="0" line="43" lod="0"
            name="java.util.Map getData()" overall="0"/>
        <method cyclomatic="0" global="0" line="105" lod="0"
            name="java.lang.String getLog()" overall="0"/>
        <method cyclomatic="0" global="0" line="65" lod="0"
            name="java.lang.String getMessage()" overall="0"/>
        <method cyclomatic="0" global="0" line="93" lod="0"
            name="java.lang.String getParsedMessage()" overall="0"/>
        <method cyclomatic="0" global="0" line="61" lod="0"
            name="com.google.jstestdriver.TestResult$Result getResult()" overall="0"/>
        <method cyclomatic="0" global="0" line="97" lod="0"
            name="java.lang.String getStack()" overall="0"/>
        <method cyclomatic="0" global="0" line="69" lod="0"
            name="java.lang.String getTestCaseName()" overall="0"/>
        <method cyclomatic="0" global="0" line="73" lod="0"
            name="java.lang.String getTestName()" overall="0"/>
        <method cyclomatic="0" global="0" line="77" lod="0"
            name="float getTime()" overall="0"/>
        <method cyclomatic="8" global="0" line="111" lod="0"
            name="int hashCode()" overall="8">
            <cost cyclomatic="1" global="0" line="112" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="114" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="115" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="116" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="118" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="120" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="121" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="123" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="0" global="0" line="81" lod="0"
            name="void setBrowserInfo(com.google.jstestdriver.BrowserInfo)" overall="0"/>
        <method cyclomatic="0" global="0" line="85" lod="0"
            name="void setParsedMessage(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="89" lod="0"
            name="void setStack(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="183" lod="0"
            name="java.lang.String toString()" overall="0"/>
    </class>
    <class class="com.google.jstestdriver.output.XmlPrinterImpl" cost="24">
        <method cyclomatic="0" global="0" line="50" lod="0"
            name="com.google.jstestdriver.output.XmlPrinterImpl(com.google.jstestdriver.output.TestResultHolder, java.lang.String)" overall="0"/>
        <method cyclomatic="2" global="0" line="79" lod="0"
            name="java.util.Map createUniqueBrowserNames(java.util.Set)" overall="2">
            <cost cyclomatic="1" global="0" line="80" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="81" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="0" global="0" line="91" lod="0"
            name="java.lang.String formatFileName(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="95" lod="0"
            name="java.lang.String formatSuiteName(java.lang.String, java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="100" lod="0"
            name="com.google.common.collect.Multimap newMultiMap()" overall="0"/>
        <method cyclomatic="25" global="0" line="56" lod="0"
            name="void writeXmlReportFiles()" overall="25">
            <cost cyclomatic="1" global="0" line="71" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="58" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="60" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="63" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="2" global="0" line="56" lod="0"
                method="java.util.Map createUniqueBrowserNames(java.util.Set)"
                overall="2" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="2" global="0" line="68" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="17" global="0" line="70" lod="0"
                method="void writeTestCase(java.lang.String, java.util.Collection)"
                overall="17" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.FileSetServlet" cost="23">
        <method cyclomatic="0" global="0" line="55" lod="0"
            name="com.google.jstestdriver.FileSetServlet(com.google.jstestdriver.CapturedBrowsers, com.google.jstestdriver.FilesCache)" overall="0"/>
        <method cyclomatic="22" global="0" line="133" lod="8"
            name="void checkFileSet(java.lang.String, java.lang.String, java.io.PrintWriter)" overall="30">
            <cost cyclomatic="1" global="0" line="138" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="139" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="139" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="139" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="143" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="0" global="0" line="136" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="13" global="0" line="137" lod="0"
                method="java.util.Set createExpiredFileSet(java.util.Collection, java.util.Set)"
                overall="13" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="0" global="0" line="139" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="139" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="139" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="139" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="139" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="139" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="159" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="4" global="0" line="147" lod="0"
                method="java.util.Set filterServeOnlyFiles(java.util.Set)"
                overall="4" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="5" global="0" line="63" lod="0"
            name="void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" overall="5">
            <cost cyclomatic="1" global="0" line="67" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="67" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="70" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="72" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="68" lod="0"
                method="void sessionHeartBeat(java.lang.String, java.lang.String)"
                overall="1" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="1" global="0" line="122" lod="0"
            name="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" overall="1">
            <cost cyclomatic="1" global="0" line="125" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="4" global="0" line="155" lod="1"
            name="java.util.Set filterServeOnlyFiles(java.util.Set)" overall="5">
            <cost cyclomatic="1" global="0" line="158" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="159" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="159" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="159" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="0" global="0" line="159" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
        </method>
        <method cyclomatic="1" global="0" line="79" lod="0"
            name="void sessionHeartBeat(java.lang.String, java.lang.String)" overall="1">
            <cost cyclomatic="1" global="0" line="81" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="6" global="0" line="96" lod="4"
            name="void startSession(java.lang.String, java.io.PrintWriter)" overall="10">
            <cost cyclomatic="1" global="0" line="100" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="104" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="104" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="104" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="112" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="100" lod="0"
                method="boolean tryLock(java.lang.String)" overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="0" global="0" line="104" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="104" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="109" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="0" global="0" line="110" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
        </method>
        <method cyclomatic="2" global="0" line="89" lod="0"
            name="void stopSession(java.lang.String, java.lang.String, java.io.PrintWriter)" overall="2">
            <cost cyclomatic="2" global="0" line="91" lod="0"
                method="void unlock(java.lang.String)" overall="2" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="1" global="0" line="170" lod="0"
            name="void update(java.util.Observable, java.lang.Object)" overall="1">
            <cost cyclomatic="1" global="0" line="171" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="1" global="0" line="177" lod="0"
            name="void uploadFiles(java.lang.String, java.lang.String)" overall="1">
            <cost cyclomatic="1" global="0" line="180" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.config.YamlParser" cost="22">
        <method cyclomatic="0" global="0" line="53" lod="0"
            name="com.google.jstestdriver.config.YamlParser(com.google.jstestdriver.PathRewriter, java.util.Set)" overall="0"/>
        <method cyclomatic="4" global="0" line="111" lod="0"
            name="java.util.Set consolidatePatches(java.util.Set)" overall="4">
            <cost cyclomatic="1" global="0" line="113" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="114" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="115" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="119" lod="0"
                method="void addPatch(com.google.jstestdriver.FileInfo)"
                overall="1" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="2" global="0" line="98" lod="0"
            name="java.util.List createArgsList(java.lang.String)" overall="2">
            <cost cyclomatic="1" global="0" line="98" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="104" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="27" global="0" line="60" lod="0"
            name="com.google.jstestdriver.config.Configuration parse(java.io.File, java.io.Reader)" overall="27">
            <cost cyclomatic="1" global="0" line="68" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="72" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="76" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="79" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="80" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="86" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="15" global="0" line="69" lod="0"
                method="java.util.Set resolveFiles(java.io.File, java.util.List, boolean)"
                overall="15" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="4" global="0" line="91" lod="0"
                method="java.util.Set consolidatePatches(java.util.Set)"
                overall="4" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="2" global="0" line="82" lod="0"
                method="java.util.List createArgsList(java.lang.String)"
                overall="2" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="15" global="0" line="130" lod="1"
            name="java.util.Set resolveFiles(java.io.File, java.util.List, boolean)" overall="16">
            <cost cyclomatic="1" global="0" line="130" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="133" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="138" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="143" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="143" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="146" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="154" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="154" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="166" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="177" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="0" global="0" line="178" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="5" global="0" line="167" lod="0"
                method="java.lang.String resolvePath(java.lang.String)"
                overall="5" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.ConfigurationParser" cost="21">
        <method cyclomatic="0" global="0" line="42" lod="0"
            name="com.google.jstestdriver.ConfigurationParser()" overall="0"/>
        <method cyclomatic="0" global="0" line="54" lod="0"
            name="com.google.jstestdriver.ConfigurationParser(java.io.File, java.io.Reader, com.google.jstestdriver.PathRewriter)" overall="0"/>
        <method cyclomatic="4" global="0" line="103" lod="0"
            name="java.util.Set consolidatePatches(java.util.Set)" overall="4">
            <cost cyclomatic="1" global="0" line="105" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="106" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="107" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="110" lod="0"
                method="void addPatch(com.google.jstestdriver.FileInfo)"
                overall="1" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="2" global="0" line="90" lod="0"
            name="java.util.List createArgsList(java.lang.String)" overall="2">
            <cost cyclomatic="1" global="0" line="90" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="96" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="0" global="0" line="169" lod="0"
            name="java.util.Set getFilesList()" overall="0"/>
        <method cyclomatic="0" global="0" line="177" lod="0"
            name="java.util.List getPlugins()" overall="0"/>
        <method cyclomatic="0" global="0" line="173" lod="0"
            name="java.lang.String getServer()" overall="0"/>
        <method cyclomatic="26" global="0" line="62" lod="0"
            name="void parse()" overall="26">
            <cost cyclomatic="1" global="0" line="66" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="69" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="72" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="75" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="76" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="81" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="14" global="0" line="67" lod="0"
                method="java.util.Set resolveFiles(java.util.List, boolean)"
                overall="14" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="4" global="0" line="85" lod="0"
                method="java.util.Set consolidatePatches(java.util.Set)"
                overall="4" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="2" global="0" line="77" lod="0"
                method="java.util.List createArgsList(java.lang.String)"
                overall="2" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="14" global="0" line="120" lod="0"
            name="java.util.Set resolveFiles(java.util.List, boolean)" overall="14">
            <cost cyclomatic="1" global="0" line="120" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="123" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="127" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="132" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="132" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="135" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="142" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="142" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="152" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="5" global="0" line="153" lod="0"
                method="java.lang.String resolvePath(java.lang.String)"
                overall="5" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.CommandTask" cost="18">
        <method cyclomatic="0" global="0" line="44" lod="0"
            name="com.google.jstestdriver.CommandTask()" overall="0"/>
        <method cyclomatic="0" global="0" line="64" lod="0"
            name="com.google.jstestdriver.CommandTask(com.google.jstestdriver.JsTestDriverFileFilter, com.google.jstestdriver.ResponseStream, java.util.Set, java.lang.String, com.google.jstestdriver.Server, java.util.Map, com.google.jstestdriver.HeartBeatManager, com.google.jstestdriver.FileLoader, boolean)" overall="0"/>
        <method cyclomatic="1" global="0" line="112" lod="0"
            name="com.google.jstestdriver.FileSource fileInfoToFileSource(com.google.jstestdriver.FileInfo)" overall="1">
            <cost cyclomatic="1" global="0" line="112" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="201" lod="0"
            name="java.util.List filterFilesToLoad(java.util.Collection)" overall="3">
            <cost cyclomatic="1" global="0" line="203" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="204" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="205" lod="0"
                method="com.google.jstestdriver.FileSource fileInfoToFileSource(com.google.jstestdriver.FileInfo)"
                overall="1" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="1" global="0" line="191" lod="0"
            name="java.util.Collection findDependencies(com.google.jstestdriver.FileInfo)" overall="1">
            <cost cyclomatic="1" global="0" line="194" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="1" global="0" line="99" lod="0"
            name="boolean isBrowserAlive()" overall="1">
            <cost cyclomatic="1" global="0" line="101" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="23" global="0" line="212" lod="0"
            name="void run()" overall="23">
            <cost cyclomatic="1" global="0" line="241" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="241" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="219" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="222" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="225" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="240" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="3" global="0" line="217" lod="0"
                method="java.lang.String startSession()" overall="3" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="222" lod="0"
                method="boolean isBrowserAlive()" overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="13" global="0" line="226" lod="0"
                method="void uploadFileSet()" overall="13" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="3" global="0" line="251" lod="0"
            name="boolean sameFiles(java.util.Collection, java.util.Collection)" overall="3">
            <cost cyclomatic="1" global="0" line="251" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="252" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="252" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="1" global="0" line="119" lod="0"
            name="void shouldPanic(com.google.jstestdriver.Response)" overall="1">
            <cost cyclomatic="1" global="0" line="119" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="77" lod="0"
            name="java.lang.String startSession()" overall="3">
            <cost cyclomatic="1" global="0" line="84" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="80" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="81" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="0" global="0" line="95" lod="0"
            name="void stopSession(java.lang.String)" overall="0"/>
        <method cyclomatic="13" global="0" line="126" lod="1"
            name="void uploadFileSet()" overall="14">
            <cost cyclomatic="1" global="0" line="132" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="138" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="153" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="166" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="3" global="0" line="135" lod="0"
                method="boolean sameFiles(java.util.Collection, java.util.Collection)"
                overall="3" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="0" global="0" line="121" lod="1"
                overall="1" reason="cost from breaking the Law of Demeter"/>
            <cost cyclomatic="2" global="0" line="150" lod="0"
                method="void shouldPanic(com.google.jstestdriver.Response)"
                overall="2" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="3" global="0" line="163" lod="0"
                method="java.util.List filterFilesToLoad(java.util.Collection)"
                overall="3" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="154" lod="0"
                method="java.util.Collection findDependencies(com.google.jstestdriver.FileInfo)"
                overall="1" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.DefaultActionListProvider" cost="17">
        <method cyclomatic="0" global="0" line="84" lod="0"
            name="com.google.jstestdriver.DefaultActionListProvider(com.google.jstestdriver.ActionFactory, com.google.jstestdriver.FileLoader, java.util.List, java.util.List, java.util.Set, boolean, java.util.List, boolean, int, java.util.Set, java.lang.String, java.lang.String, com.google.jstestdriver.ResponseStreamFactory, com.google.jstestdriver.guice.DefaultThreadedActionProvider, com.google.inject.Provider, com.google.inject.Provider, com.google.inject.Provider, com.google.jstestdriver.FailureAccumulator, java.util.Set, com.google.jstestdriver.output.XmlPrinter)" overall="0"/>
        <method cyclomatic="0" global="0" line="37" lod="0"
            name="java.lang.Object get()" overall="0"/>
        <method cyclomatic="17" global="0" line="109" lod="0"
            name="java.util.List get()" overall="17">
            <cost cyclomatic="1" global="0" line="126" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="131" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="15" global="0" line="130" lod="0"
                method="java.util.List build()" overall="15" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.FileCacheServlet" cost="14">
        <method cyclomatic="0" global="0" line="36" lod="0"
            name="com.google.jstestdriver.FileCacheServlet()" overall="0"/>
        <method cyclomatic="14" global="0" line="47" lod="0"
            name="void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" overall="14">
            <cost cyclomatic="1" global="0" line="54" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="13" global="0" line="51" lod="0"
                method="java.util.Set createExpiredFileSet(java.util.Collection, java.util.Set)"
                overall="13" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.FileSetCacheStrategy" cost="13">
        <method cyclomatic="0" global="0" line="22" lod="0"
            name="com.google.jstestdriver.FileSetCacheStrategy()" overall="0"/>
        <method cyclomatic="13" global="0" line="26" lod="0"
            name="java.util.Set createExpiredFileSet(java.util.Collection, java.util.Set)" overall="13">
            <cost cyclomatic="1" global="0" line="28" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="28" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="29" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="36" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="39" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="40" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="41" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="41" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="5" global="0" line="41" lod="0"
                method="boolean equals(java.lang.Object)" overall="5" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.TestResultGenerator" cost="13">
        <method cyclomatic="0" global="1" line="33" lod="0"
            name="com.google.jstestdriver.TestResultGenerator()" overall="10">
            <cost cyclomatic="0" global="1" line="33" lod="0"
                overall="10" reason="dependency on global mutable state"/>
        </method>
        <method cyclomatic="0" global="1" line="31" lod="0"
            name="com.google.jstestdriver.TestResultGenerator()" overall="10">
            <cost cyclomatic="0" global="1" line="33" lod="0"
                method="com.google.jstestdriver.TestResultGenerator()"
                overall="10" reason="implicit cost from static initialization"/>
        </method>
        <method cyclomatic="6" global="1" line="46" lod="0"
            name="java.util.Collection getTestResults(com.google.jstestdriver.Response)" overall="16">
            <cost cyclomatic="0" global="1" line="33" lod="0"
                method="com.google.jstestdriver.TestResultGenerator()"
                overall="10" reason="implicit cost from static initialization"/>
            <cost cyclomatic="1" global="0" line="46" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="53" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="64" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="3" global="0" line="59" lod="0"
                method="void parse(java.lang.String)" overall="3" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.output.TestXmlSerializer" cost="13">
        <method cyclomatic="2" global="0" line="48" lod="0"
            name="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)" overall="2">
            <cost cyclomatic="1" global="0" line="58" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="60" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="138" lod="0"
            name="void addError(java.lang.String)" overall="3">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="146" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="122" lod="0"
            name="void addFailure(java.lang.String, java.lang.String)" overall="3">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="131" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="153" lod="0"
            name="void addOutput(java.lang.String)" overall="3">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="162" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="114" lod="0"
            name="void endTestCase()" overall="3">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="115" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="88" lod="0"
            name="void endTestSuite()" overall="3">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="92" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="3" global="0" line="100" lod="0"
            name="void startTestCase(java.lang.String, java.lang.String, float)" overall="3">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="107" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="4" global="0" line="68" lod="0"
            name="void startTestSuite(java.lang.String, com.google.jstestdriver.output.TestXmlSerializer$SuiteAggregator)" overall="4">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="81" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="71" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="19" global="0" line="168" lod="0"
            name="void writeTestCase(java.lang.String, java.util.Collection)" overall="19">
            <cost cyclomatic="2" global="0" line="48" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer(java.io.Writer)"
                overall="2" reason="implicit cost from construction"/>
            <cost cyclomatic="1" global="0" line="180" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="171" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="173" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="183" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="185" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="192" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="3" global="0" line="169" lod="0"
                method="com.google.jstestdriver.output.TestXmlSerializer$SuiteAggregator aggregate()"
                overall="3" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="2" global="0" line="170" lod="0"
                method="void startTestSuite(java.lang.String, com.google.jstestdriver.output.TestXmlSerializer$SuiteAggregator)"
                overall="2" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="172" lod="0"
                method="void startTestCase(java.lang.String, java.lang.String, float)"
                overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="190" lod="0"
                method="void endTestCase()" overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="193" lod="0"
                method="void addOutput(java.lang.String)" overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="195" lod="0"
                method="void endTestSuite()" overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="184" lod="0"
                method="void addFailure(java.lang.String, java.lang.String)"
                overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="186" lod="0"
                method="void addError(java.lang.String)" overall="1" reason="cost from calling non-overridable method"/>
        </method>
    </class>
    <class class="com.google.jstestdriver.Response" cost="12">
        <method cyclomatic="0" global="0" line="28" lod="0"
            name="com.google.jstestdriver.Response()" overall="0"/>
        <method cyclomatic="14" global="0" line="123" lod="0"
            name="boolean equals(java.lang.Object)" overall="14">
            <cost cyclomatic="1" global="0" line="123" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="125" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="126" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="127" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="128" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="129" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="130" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="131" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="132" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="133" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="134" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="135" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="136" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="137" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="0" global="0" line="62" lod="0"
            name="com.google.jstestdriver.BrowserInfo getBrowser()" overall="0"/>
        <method cyclomatic="0" global="0" line="70" lod="0"
            name="java.lang.String getError()" overall="0"/>
        <method cyclomatic="0" global="0" line="78" lod="0"
            name="long getExecutionTime()" overall="0"/>
        <method cyclomatic="0" global="0" line="100" lod="0"
            name="java.lang.reflect.Type getGsonType()" overall="0"/>
        <method cyclomatic="0" global="0" line="54" lod="0"
            name="java.lang.String getResponse()" overall="0"/>
        <method cyclomatic="1" global="0" line="92" lod="0"
            name="com.google.jstestdriver.Response$ResponseType getResponseType()" overall="1">
            <cost cyclomatic="1" global="0" line="92" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="4" global="0" line="112" lod="0"
            name="int hashCode()" overall="4">
            <cost cyclomatic="1" global="0" line="113" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="114" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="116" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="117" lod="0"
                overall="1" reason="cyclomatic complexity"/>
        </method>
        <method cyclomatic="0" global="0" line="66" lod="0"
            name="void setBrowser(com.google.jstestdriver.BrowserInfo)" overall="0"/>
        <method cyclomatic="0" global="0" line="74" lod="0"
            name="void setError(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="82" lod="0"
            name="void setExecutionTime(long)" overall="0"/>
        <method cyclomatic="0" global="0" line="58" lod="0"
            name="void setResponse(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="87" lod="0"
            name="void setType(java.lang.String)" overall="0"/>
        <method cyclomatic="0" global="0" line="105" lod="0"
            name="java.lang.String toString()" overall="0"/>
    </class>
    <class class="com.google.jstestdriver.token.TokenEmitter" cost="12">
        <method cyclomatic="0" global="0" line="28" lod="0"
            name="com.google.jstestdriver.token.TokenEmitter(java.io.BufferedInputStream, com.google.jstestdriver.token.Token[])" overall="0"/>
        <method cyclomatic="5" global="0" line="75" lod="0"
            name="boolean hasNext()" overall="5">
            <cost cyclomatic="1" global="0" line="76" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="75" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="75" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="75" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="75" lod="0"
                method="boolean hasToken()" overall="1" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="14" global="0" line="34" lod="0"
            name="com.google.jstestdriver.token.Token next()" overall="14">
            <cost cyclomatic="1" global="0" line="68" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="68" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="68" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="68" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="68" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="35" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="41" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="42" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="44" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="45" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="57" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="62" lod="0"
                overall="1" reason="cyclomatic complexity"/>
            <cost cyclomatic="1" global="0" line="62" lod="0"
                method="boolean hasToken()" overall="1" reason="cost from calling non-overridable method"/>
            <cost cyclomatic="1" global="0" line="54" lod="0"
                method="void append(int)" overall="1" reason="cost from calling non-overridable method"/>
        </method>
        <method cyclomatic="0" global="0" line="22" lod="0"
            name="java.lang.Object next()" overall="0"/>
        <method cyclomatic="0" global="0" line="82" lod="0"
            name="void remove()" overall="0"/>
    </class>
</testability>
