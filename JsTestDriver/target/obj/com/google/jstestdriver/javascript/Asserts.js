function expectAsserts(a){jstestdriver.expectedAssertCount=a}function fail(b){var a=new Error(b);a.name="AssertError";throw a}function isBoolean_(a){if(typeof(a)!="boolean"){this.fail("Not a boolean: "+this.prettyPrintEntity_(a))}}function prettyPrintEntity_(a){var b=JSON.stringify(a);if(!b){if(typeof a==="function"){return"[function]"}return"["+typeof a+"]"}return b}function argsWithOptionalMsg_(b,e){var a=[];for(var d=0;d<b.length;d++){a.push(b[d])}var c=e-1;if(b.length<c){this.fail("expected at least "+c+" arguments, got "+b.length)}else{if(b.length==e){a[0]+=" "}else{a.unshift("")}}return a}function assertTrue(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;isBoolean_(a[1]);if(a[1]!=true){this.fail(a[0]+"expected true but was "+this.prettyPrintEntity_(a[1]))}return true}function assertFalse(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;isBoolean_(a[1]);if(a[1]!=false){this.fail(a[0]+"expected false but was "+this.prettyPrintEntity_(a[1]))}return true}function assertEquals(c,b,d){var a=this.argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;c=a[0];b=a[1];d=a[2];if(!compare_(b,d)){this.fail(c+"expected "+this.prettyPrintEntity_(b)+" but was "+this.prettyPrintEntity_(d)+"")}return true}function compare_(d,e){var b=null;if(d!==undefined&&typeof(d)=="object"){var c=0;var a=0;if(d instanceof [].constructor){c=e.length}else{for(b in e){if(!e.hasOwnProperty(b)){continue}++c}}for(b in d){if(!d.hasOwnProperty(b)){continue}if(!compare_(d[b],e[b])){return false}++a}if(a!==c){return false}return true}if(e!=d){return false}return true}function assertNotEquals(d,b,f){try{assertEquals.apply(this,arguments)}catch(c){if(c.name=="AssertError"){return true}throw c}var a=this.argsWithOptionalMsg_(arguments,3);this.fail(a[0]+"expected "+this.prettyPrintEntity_(a[1])+" not to be equal to "+this.prettyPrintEntity_(a[2]))}function assertSame(c,b,d){var a=this.argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(!isSame_(a[2],a[1])){this.fail(a[0]+"expected "+this.prettyPrintEntity_(a[1])+" but was "+this.prettyPrintEntity_(a[2]))}return true}function assertNotSame(c,b,d){var a=this.argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(isSame_(a[2],a[1])){this.fail(a[0]+"expected not same as "+this.prettyPrintEntity_(a[1])+" but was "+this.prettyPrintEntity_(a[2]))}return true}function isSame_(a,b){return b===a}function assertNull(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(a[1]!==null){this.fail(a[0]+"expected null but was "+this.prettyPrintEntity_(a[1]))}return true}function assertNotNull(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(a[1]===null){this.fail(a[0]+"expected not null but was null")}return true}function assertUndefined(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(typeof a[1]!="undefined"){this.fail(a[2]+"expected undefined but was "+this.prettyPrintEntity_(a[1]))}return true}function assertNotUndefined(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(typeof a[1]=="undefined"){this.fail(a[0]+"expected not undefined but was undefined")}return true}function assertNaN(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(!isNaN(a[1])){this.fail(a[0]+"expected to be NaN but was "+a[1])}return true}function assertNotNaN(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(isNaN(a[1])){this.fail(a[0]+"expected not to be NaN")}return true}function assertException(c,d,a){if(arguments.length==1){d=c;c=""}else{if(arguments.length==2){if(typeof d!="function"){a=d;d=c;c=""}else{c+=" "}}else{c+=" "}}jstestdriver.assertCount++;try{d()}catch(b){if(b.name=="AssertError"){throw b}if(a&&b.name!=a){this.fail(c+"expected to throw "+a+" but threw "+b.name)}return true}this.fail(c+"expected to throw exception")}function assertNoException(c,d){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;try{a[1]()}catch(b){fail(a[0]+"expected not to throw exception, but threw "+b.name+" ("+b.message+")")}}function assertArray(b,c){var a=this.argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(!jstestdriver.jQuery.isArray(a[1])){fail(a[0]+"expected to be array, but was "+this.prettyPrintEntity_(a[1]))}}function assertTypeOf(d,b,c){var a=this.argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;var e=typeof a[2];if(e!=a[1]){this.fail(a[0]+"expected to be "+a[1]+" but was "+e)}return true}function assertBoolean(b,c){var a=this.argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"boolean",a[1])}function assertFunction(b,c){var a=this.argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"function",a[1])}function assertObject(b,c){var a=this.argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"object",a[1])}function assertNumber(b,c){var a=this.argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"number",a[1])}function assertString(b,c){var a=this.argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"string",a[1])}function assertMatch(d,c,e){var a=this.argsWithOptionalMsg_(arguments,3);var b=typeof a[2]=="undefined";jstestdriver.assertCount++;if(b||!a[1].test(a[2])){e=(b?undefined:this.prettyPrintEntity_(a[2]));this.fail(a[0]+"expected "+e+" to match "+a[1])}return true}function assertNoMatch(c,b,d){var a=this.argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(a[1].test(a[2])){this.fail(a[0]+"expected "+this.prettyPrintEntity_(a[2])+" not to match "+a[1])}return true}function assertTagName(d,c,b){var a=this.argsWithOptionalMsg_(arguments,3);var e=a[2]&&a[2].tagName;if(String(e).toUpperCase()!=a[1].toUpperCase()){this.fail(a[0]+"expected tagName to be "+a[1]+" but was "+e)}return true}function assertClassName(g,c,b){var a=this.argsWithOptionalMsg_(arguments,3);var h=a[2]&&a[2].className;var d=new RegExp("(^|\\s)"+a[1]+"(\\s|$)");try{this.assertMatch(a[0],d,h)}catch(f){h=this.prettyPrintEntity_(h);this.fail(a[0]+"expected class name to include "+this.prettyPrintEntity_(a[1])+" but was "+h)}return true}function assertElementId(c,e,b){var a=this.argsWithOptionalMsg_(arguments,3);var d=a[2]&&a[2].id;jstestdriver.assertCount++;if(d!==a[1]){this.fail(a[0]+"expected id to be "+a[1]+" but was "+d)}return true}function assertInstanceOf(e,c,f){var a=this.argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(!(Object(a[2]) instanceof a[1])){var d=a[1]&&a[1].name||a[1];var b=this.prettyPrintEntity_(a[2]);this.fail(a[0]+"expected "+b+" to be instance of "+d)}return true}function assertNotInstanceOf(e,c,f){var a=this.argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(Object(a[2]) instanceof a[1]){var d=a[1]&&a[1].name||a[1];var b=this.prettyPrintEntity_(a[2]);this.fail(a[0]+"expected "+b+" not to be instance of "+d)}return true}var assert=assertTrue;